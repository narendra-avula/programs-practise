Bits are the fundamental unit of data storage in any computer based system. Large number of bits come together to form

bytes, large number of bytes come together to form kilo-bytes and so on. Thus, this fundamental unit of storage ,

that is bits have a very important role to play in solving a variety of problems and many a times make much more

complex tasks simpler.

It is known that 1 byte comprises of 8 bits and any integer or character can be represented using bits in computers,

which is known as its binary form (contains only 1 or 0) or in its base 2 form.

Example:
1) 14 = {1110}2
= 1 * 23 + 1 * 22 + 1 * 21 + 0 * 20
= 14

2) 20 = {10100}2
= 1 * 24 + 0 * 23 + 1 * 22 + 0 * 21 + 0 * 20
= 20.

For characters, we can use ASCII representation, which are in the form of integers which again can be represented

using bits as explained above.

Bitwise Operators:

Bitwise operator are used to perform opertions on individual bits. As we use the addition, subtraction operators on

real numbers, similarily bitwise operators are used to do the same with individual bits.

There are a variety of bitwise operators that are as follows:

NOT ( ~ ): Bitwise NOT is an unary operator that flips the bits of the number i.e., if the
i
t
h
ith bit is
0
0, it will change it to
1
1 and vice versa. Bitwise NOT is nothing but simply the one’s complement of a number. Consider an example.
N = 5 = (101)2
~N = ~5 = ~(101)2 = (010)2 = 2

AND ( & ): Bitwise AND is a binary operator that operates on two equal-length bit patterns. If both bits in the

compared position of the bit patterns are
1
1, the bit in the resulting bit pattern is
1
1, otherwise
0
0.
A = 5 = (101)2 , B = 3 = (011)2 A & B = (101)2 & (011)2= (001)2 = 1

OR ( | ): Bitwise OR is also a binary operator that operates on two equal-length bit patterns, similar to bitwise

AND. If both bits in the compared position of the bit patterns are
0
0, the bit in the resulting bit pattern is
0
0, otherwise
1
1.
A = 5 = (101)2 , B = 3 = (011)2
A | B = (101)2 | (011)2 = (111)2 = 7

XOR ( ^ ): Bitwise XOR also takes two equal-length bit patterns. If both bits in the compared position of the bit

patterns are
0
0 or
1
1, the bit in the resulting bit pattern is
0
0, otherwise
1
1.
A = 5 = (101)2 , B = 3 = (011)2
A ^ B = (101)2 ^ (011)2 = (110)2 = 6

Left Shift ( << ): Left shift operator is a unary operator which shifts some number of bits, in the given bit

pattern, to the left and append
0
0 at the end. Left shift is equivalent to multiplying the bit pattern with
2
k
2k (if we are shifting
k
k bits).
1 << 1 = 2 = 21
1 << 2 = 4 = 22 1 << 3 = 8 = 23
1 << 4 = 16 = 24
…
1 << n = 2n

Right Shift ( >> ): Right shift operator is a unary operator which shifts some number of bits, in the given

bit pattern, to the right and append
1
1 at the end. Right shift is equivalent to dividing the bit pattern with
2
k
2k (if we are shifting
k
k bits).
4 >> 1 = 2
6 >> 1 = 3
5 >> 1 = 2
16 >> 4 = 1

enter image description here

Bitwise operators are good for saving space and sometimes to cleverly remove dependencies.

Have a look at this simple application of this technique for finding the number of 1s in binary representation of a

number.

The basic approach to evaluate the binary form of a number is to traverse on it and count the number of ones. But

this approach takes log2N of time in every case.

Why log2N ?
As to get a number in its binary form, we have to divide it by 2, until it gets 0, which will take log2N of time.

With bitwise operations, we can use an algorithm whose running time depends on the number of ones present in the

binary form of the given number. This algorithm is much better, as it will reach to logN, only in its worst case.

int count_one (int n)
{
    while(n)
    {
        n = n & (n-1);
        count++;
    }
    return count;
}
Why this algorithm works ?
As explained in the previous algorithm, the relationship between the bits of
x
x and
x
?
1
x?1. So as in
x
?
1
x?1, the rightmost
1
1 and bits right to it are flipped, then by performing x&(x-1)x&(x-1), and storing it in
x
x, will reduce
x
x to a number containing number of ones (in its binary form) less than the previous state of
x
x, thus increasing the value of count in each iteration.

Example:
n = 23 = {10111}2 .
1. Initially, count = 0.

2. Now, n will change to n&(n-1). As n-1 = 22 = {10110}2 , then n&(n-1) will be {101112 & {10110}2, which will be

{10110}2 which is equal to 22. Therefore n will change to 22 and count to 1.

3. As n-1 = 21 = {10101}2 , then n&(n-1) will be {10110}2 & {10101}2, which will be {10100}2 which is equal to 20.

Therefore n will change to 20 and count to 2.

4. As n-1 = 19 = {10011}2 , then n&(n-1) will be {10100}2 & {10011}2, which will be {10000}2 which is equal to 16.

Therefore n will change to 16 and count to 3.

5. As n-1 = 15 = {01111}2 , then n&(n-1) will be {10000}2 & {01111}2, which will be {00000}2 which is equal to 0.

Therefore n will change to 0 and count to 4.

6. As n = 0, the the loop will terminate and gives the result as 4.

Complexity:
O(K), where K is the number of ones present in the binary form of the given number.