Tutorial on String Manipulation Basic
AUTHOR
Ravi Ojha
A string is essentially a sequence of characters. In other words, a string is an array of character data type. An instance of a string is called a string literal. For instance in C++: string s = "HackerEarth";
s
s is a string literal.

String Manipulation is a class of problems where a user is asked to process the given string and use/change its data. An example question would be a great way to understand the problems that are usually classified under this category.

Given a string
S
S of length
N
N, shift each character of the string by
K
K positions to the right, where
K
?
N
K?N.
For example: Say
S
S = "hacker" and
K
=
2
K=2. Here
N
=
6
N=6.
Shifting each character in
S
S by
2
2 positions to the right would result into
e
r
h
a
c
k
erhack.
Note that
S
[
0
]
S[0] i.e. 'h' is moved by 2 positions to the
S
[
2
]
S[2]. Also,
S
[
5
]
S[5] i.e. 'r', which is the last character in
S
S comes round-about back to
S
[
1
]
S[1] as there is no space for 'r' to go beyond the limits of string length.

Approach:

Declare another auxillary string
s
h
i
f
t
e
d
S
shiftedS that is of the same size as
S
S.
Copy
i
t
h
ith element of
S
S to the
(
K
+
i
)
t
h
(K+i)th position in
s
h
i
f
t
e
d
S
shiftedS. This means,
s
h
i
f
t
e
d
S
[
i
+
K
]
=
S
[
i
]
shiftedS[i+K]=S[i] where
0
?
i
<
N
0?i<N.
Make sure that
i
+
K
i+K never exceeds
N
N, because that will try to access a memory location which is not declared in
s
h
i
f
t
e
d
S
shiftedS. There's a simple trick to ensure that. Use
(
i
+
K
)
m
o
d
N
(i+K)modN for that.
Implementation:

void shiftByK(char S[], char shiftedS[], int N, int K) {
    // Iterate through the length of given string
    for(int i=0; i<N; i++) {
        // Find the index for this current character in shiftedS[]
        int idx = (i+K) % N;
        // Copy that character at the found index idx
        shiftedS[idx] = S[i];
    }
    // Add a NULL character to mark the end of string
    shiftedS[N] = '\0';
}
Every character array in C/C++ ends with a '\0' (NULL) character. It marks the end of the string. If it is not added in the end, the code may produce garbage characters after the string.